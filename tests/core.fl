# Tests core functionality of First-Lang

Function assert_equal(actual, expected)
  If actual == expected Then
    Println "Passed."
  Else
    Println "assert_equal failed! Expected #{expected} but got #{actual}"
  End
End

Function test_Deannotation()
  Println "Running test_Deannotation()..."

  Let amount = 3,125.dollars
  assert_equal(amount, 3125)

  Let amount = 5.08.ft
  assert_equal(amount, 5.08)
End
test_Deannotation()

Function test_Conditional()
  Println "Running test_Conditional()..."

  # Test equality
  Let a = 1, b = 1, c = 2
  Var result

  result = FALSE
  If a == b Then
    result = TRUE
  End
  assert_equal(result, TRUE)

  result = FALSE
  If c > b Then
    result = TRUE
  End
  assert_equal(result, TRUE)

  # Test Else
  If a > b Then
    result = FALSE
  Else
    result = TRUE
  End
  assert_equal(result, TRUE)

  # Test Elseif
  If a == 2 Then
    result = FALSE
  Elseif a == 1 Then
    result = TRUE
  Else
    result = FALSE
  End
  assert_equal(result, TRUE)

  # Test Select / When
  result = FALSE
  Select a
    When 1
      result = TRUE
    When 2
      result = FALSE
  End
  assert_equal(result, TRUE)

  # Test Select / Else
  Select a
    When 2
      result = FALSE
    Else
      result = TRUE
  End
  assert_equal(result, TRUE)
End
test_Conditional()

Function test_Iterations()
  Println "Running test_Iterations()..."

  # Simple infite Loop with Break condition
  Let z = 0
  Loop
    z = z + 1
    Break If z==5
  End
  assert_equal(z, 5)

  # Loop / While
  Let z = 0
  Loop
    z = z + 1
  While z < 4
  assert_equal(z, 4)

  # For / Foreach loops
  Let z = 0
  For i = 1 To 5
    z = i
  End
  assert_equal(z, 5)

  Let z = 5
  For i = 5 To 1 Step -1
    z = i
  End
  assert_equal(z, 1)

  Let z = 0
  Foreach i In [5, 4, 3]
    z = i
  End
  assert_equal(z, 3)

  Let x = '', y = 0
  Foreach k, v In { "a": 1, "b": 2 }
    x = k
    y = v
  End
  assert_equal(x, 'b')
  assert_equal(y, 2)
End
test_Iterations()
