#!/usr/bin/env ruby
require 'pry'

class Translator
  REGEXES = {
    scalar: '[a-z][a-zA-Z_]*',
  }

  def self.translate(line)
    @fl2rb ||= {
      'Const': '',
      'Do': :tr_do,
      'Else': 'else',
      'Elseif': 'elsif',
      'ElseIf': 'elsif',
      'End': 'end',
      'For': :tr_for,
      'Foreach': 'for',
      'If': 'if',
      'In': 'in',
      'Let': '',
      'Print': 'puts',
      'Select': 'case',
      'Then': '',
      'TRUE': 'true',
      'Var': :tr_var,
      'When': 'when',
      'While': :tr_while,
    }

    tokenize(line).each do |token|
      token = token.to_sym
      if @fl2rb[token].is_a?(Symbol) && self.respond_to?(@fl2rb[token])
        line = send(@fl2rb[token], line)
      else
        line.gsub!(/\b#{token}\b/, @fl2rb[token])
      end
    end
    line
  end

  def self.deannotate(line)
    # 1,000.50.dollars, -> 1,000.50,
    line.gsub!(/([+-]?[0-9]{1,3}(?:,?[0-9]{3})*(?:\.[0-9]{2})?)(?:\.[a-zA-Z]+)?(\s*[,])?/,'\1\2')
    # 1,000.50 -> 1000.50
    line.gsub!(/([0-9]{1,3})(?:,[0-9]{3})?/, '\1')
    # @arr -> arr, %hash -> hash
    r = Regexp.compile("[@%](#{REGEXES[:scalar]})")
    line.gsub!(r, '\1')
    # "Foo" : "bar" -> "Foo": "bar"
    line.gsub!(/("[a-zA-Z_]+")\s*/,'\1')
    line
  end

  private
  def self.tokenize(line)
    line.split(/\s+/).select{ |l| @fl2rb.keys.include?(l.to_sym) }.uniq
  end

  def self.tr_do(line)
    @in_do ||= []
    # Track inside do block
    @in_do.push(true)
    line.gsub!(/Do/, 'begin')
    line
  end

  def self.tr_for(line)
    # For i = 1 To 100 Step 2
    r = Regexp.compile("For\s+(#{REGEXES[:scalar]})\s*=\s*([0-9]+)\s*To\s*([0-9]+)")
    # for i in (1..100)
    line.gsub!(r, 'for \1 in (\2..\3)')
    # for i in (1..100).step(2)
    line.gsub!(/\s*Step\s*([0-9]+)/, '.step(\1)')
    line
  end

  def self.tr_var(line)
    # Var foo, bar
    # Var foo = bar
    line.chomp!
    line.gsub!(/\bVar \b/, '')
    vars = line.split(/[,]/)
    vars.map{ |var| "#{var}=nil"}.join("\n")
  end

  def self.tr_while(line)
    @in_do ||= []
    if @in_do.pop
      # While -> end while
      line.gsub!(/While\s+/, 'end while ')
    else
      # While -> while
      line.downcase!
    end
    line
  end
end

def save_compiled(source)
  File.open('/tmp/source.rb', 'w') do |f|
    f.puts source
  end
end

def execute
  exec('ruby', '/tmp/source.rb')
end

puts "Usage: fl <source.fl>" unless ARGV.length == 1
source_in = ARGV.first
source = File.readlines(source_in)

source.map! do |line|
  next if line.match(/^\s*$/)
  line = Translator.deannotate(line)
  line = Translator.translate(line)
end

save_compiled(source)
execute() 
